name: Xbox Pacman Builder

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'Xbox_Pacman'

jobs:
  build:
    runs-on: windows-2019

    env:
      SolutionPath: "emulator.uwp/pac-man-emulator-uwp.sln"
      Platform: x64
      Configuration: Debug
      BuildMode: SideLoadOnly
      AppxBundle: Never
      ProjectPath: "emulator.uwp/pac-man-emulator-uwp.csproj"
      ProjectDirectory: "./emulator.uwp/Xbox Pacman"
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: "emulator.uwp/Xbox Pacman"
      PfxPassword: 'YourSecurePassword123!' # Replace with a strong password

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Decode PFX Certificate
        run: |
          [System.IO.File]::WriteAllBytes("$env:PackageOutputRootDir\uwp_cert.pfx", [Convert]::FromBase64String("${{ secrets.PFX_CERTIFICATE_BASE64 }}"))
        shell: pwsh

      - name: Verify PFX File
        run: |
          if (Test-Path "$env:PackageOutputRootDir\uwp_cert.pfx") {
            Write-Host "PFX file created successfully."
          } else {
            Write-Host "PFX file not found!"
            exit 1
          }
        shell: pwsh

      - name: App Build
        run: |
          msbuild /restore `
            "$env:SolutionPath" `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="CD2BD70C693B0F785F0B34883E1764D61990FE15" `
            /p:AppxPackageTestDir="${env:PackageOutputRootDir}\${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" `
            /p:AppxPackageSigningEnabled=true `
            /p:RestorePackagesConfig=true
        shell: pwsh

      - name: Clean the Package
        run: |
          $PackagePath = "${env:PackageOutputRootDir}\${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}"
          if (Test-Path $PackagePath) {
            Write-Host "Cleaning package directory: $PackagePath"
            Remove-Item -Recurse -path "$PackagePath\Add-AppDevPackage.resources" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\TelemetryDependencies" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm64" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\x86" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\Win32" -ErrorAction SilentlyContinue
            Remove-Item -path "$PackagePath\Add-AppDevPackage.ps1" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Install.ps1" -ErrorAction SilentlyContinue
          } else {
            Write-Host "Package path does not exist: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Create Archive
        run: |
          $PackagePath = "${env:PackageOutputRootDir}\${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "${env:PackageOutputRootDir}\${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}.zip"
            Write-Host "Contents of package output directory after archiving:"
            Get-ChildItem -Path "${env:PackageOutputRootDir}" -Recurse
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ github.event.inputs.package_name }} Build
          path: "${env:PackageOutputRootDir}${{ github.event.inputs.package_name }}_$ {{github.event.inputs.tag_name }}.zip"
